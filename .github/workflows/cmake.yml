name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Check programs
      shell: bash
      run: |
        function check() {
          local res=$( (which $1 2> /dev/null) || "Absent")
          echo "$1: $res"
        }
        check clang++
        check llvm-profdata
        check llvm-cov
        check lcov
        check gcov
        dpkg -l

    - name: Setup python environment
      uses: actions/setup-python@v2
      env:
        cache-name: conan-pyenv
      with:
        python-version: 3.8
    - name: Install Conan
      run: |
        python -m pip install conan
        conan config init
        conan profile update settings.compiler.libcxx=libstdc++11 default

    - name: Cache conan packages
      uses: actions/cache@v2
      env:
        cache-name: conan-pkgs
      with:
        path: ~/.conan
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('$GITHUB_WORKSPACE/conanfile.txt') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Setup project with cmake
      working-directory: ${{runner.workspace}}/build
      #shell: bash
      run: |
        python $GITHUB_WORKSPACE/make.py \
            --build-dir ${{runner.workspace}}/build \
            setup \
            --coverage \
            --clang

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: |
        python $GITHUB_WORKSPACE/make.py \
            --build-dir ${{runner.workspace}}/build \
            build \
            --notest

    - name: Generate coverage data
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --target coverage-data

    - name: Save artifacts
      uses: actions/upload-artifact@v2
      with:
        name: build-artifacts
        path: ${{runner.workspace}}/build

  coverage:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v2

    - name: Save artifacts
      uses: actions/download-artifact@v2
      with:
        name: build-artifacts
        path: ${{runner.workspace}}/build

    - name: Generate Profdata File
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: llvm-profdata-9 merge -sparse -o default.profdata profraw/*.profraw

    - name: Show results of coverage report
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: llvm-cov-9 report -instr-profile=default.profdata tests/*

    - name: Generate coverage as html
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: llvm-cov-9 show -format=html -output-dir=html -instr-profile=default.profdata tests/*

    - name: Save report
      uses: actions/upload-artifact@v2
      with:
        name: coverage-report
        path: ${{runner.workspace}}/build/html

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v2

    - name: Save artifacts
      uses: actions/download-artifact@v2
      with:
        name: build-artifacts
        path: ${{runner.workspace}}/build

    - name: Add execute perms
      working-directory: ${{runner.workspace}}/build
      run: chmod +x tests/*

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE


# vim: set sw=2 ts=2 expandtab:
