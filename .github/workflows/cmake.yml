name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    # Install Conan via Python pip to handle C++ libary dependencies
    - name: Setup python environment
      uses: actions/setup-python@v2
      env:
        cache-name: conan-pyenv
      with:
        python-version: 3.8
    - name: Install Conan
      run: |
        python -m pip install conan
        conan config init
        conan profile update settings.compiler.libcxx=libstdc++11 default

    # Cache conan packages to save on time and download bandwidth
    - name: Cache conan packages
      uses: actions/cache@v2
      env:
        cache-name: conan-pkgs
      with:
        path: ~/.conan
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/conanfile.txt') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    # Build the project
    #   Using clang for it's tooling that makes coverage a bit easier.
    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build
    - name: Setup project with cmake
      working-directory: ${{runner.workspace}}/build
      run: |
        python $GITHUB_WORKSPACE/make.py \
            --build-dir ${{runner.workspace}}/build \
            setup \
            --coverage \
            --clang
    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: |
        python $GITHUB_WORKSPACE/make.py \
            --build-dir ${{runner.workspace}}/build \
            build \
            --notest \
            --verbose

    # Generate data for other jobs so we don't have to store the whole build
    # directory.
    - name: Generate coverage data
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --target coverage-data

    # Save artifacts for other jobs
    #   Using the tar container preserves permissions across jobs
    - name: Archive test artifacts into tar container
      working-directory: ${{runner.workspace}}
      run: tar -cvf ${{runner.workspace}}/test-artifacts.tar build/tests/*_test
    - name: Save test artifacts
      uses: actions/upload-artifact@v2
      with:
        name: test-artifacts
        path: ${{runner.workspace}}/test-artifacts.tar
    - name: Archive coverage artifacts into tar container
      working-directory: ${{runner.workspace}}
      run: tar -cvf ${{runner.workspace}}/coverage-artifacts.tar build/profraw/*.profraw
    - name: Save coverage data
      uses: actions/upload-artifact@v2
      with:
        name: coverage-artifacts
        path: ${{runner.workspace}}/coverage-artifacts.tar

  coverage:
    runs-on: ubuntu-latest
    needs: build
    steps:
    # Checkout required for referencing source files
    - uses: actions/checkout@v2

    # Download artifacts from the build stage
    - name: Save artifacts
      uses: actions/download-artifact@v2
      with:
        name: coverage-artifacts
        path: ${{runner.workspace}}/
    - name: Save artifacts
      uses: actions/download-artifact@v2
      with:
        name: test-artifacts
        path: ${{runner.workspace}}/
    - name: Unpack artifacts
      working-directory: ${{runner.workspace}}
      run: |
        tar -xvf coverage-artifacts.tar
        tar -xvf test-artifacts.tar

    # Process data
    - name: Generate Profdata File
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: llvm-profdata-9 merge -sparse -o default.profdata profraw/*.profraw

    # Represent Data
    - name: Show results of coverage report
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: llvm-cov-9 report -instr-profile=default.profdata tests/*
    - name: Generate coverage as html
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: llvm-cov-9 show -format=html -output-dir=html -instr-profile=default.profdata tests/*

    # Save
    - name: Save report
      uses: actions/upload-artifact@v2
      with:
        name: coverage-report
        path: ${{runner.workspace}}/build/html

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
    # Obtain tests to run
    - name: Save artifacts
      uses: actions/download-artifact@v2
      with:
        name: test-artifacts
        path: ${{runner.workspace}}/
    - name: Unapack artifacts
      working-directory: ${{runner.workspace}}
      run: tar -xvf test-artifacts.tar

    # Run all tests and return error if any return error
    #- name: Add execute perms
    #  working-directory: ${{runner.workspace}}/build
    #  run: chmod +x tests/*
    - name: Test
      working-directory: ${{runner.workspace}}/build/tests
      shell: bash
      run: |
        IS_FAILURE=0
        for test in *_test; do
          "./${test}" || IS_FAILURE=1
        done
        exit ${IS_FAILURE}


# vim: set sw=2 ts=2 expandtab:
